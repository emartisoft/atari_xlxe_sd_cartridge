ptr	equ	$80
ptr2	equ	$82
dentry	equ	$84
dentry2	equ	$86
cursor	equ	$88

sdmctl	equ	$22f
dladr	equ	$230

command	 equ	$d5e8
sec_offs equ	$d5e9
sec_cnt	 equ	$d5ea
sec_num	 equ	$d5eb

screen		equ $5000
sec_buf1	equ $9000
sec_buf1_size	equ [2*512]
fat_buf		equ [sec_buf1+sec_buf1_size]
fat_buf_size	equ [1*512]

max_files	   equ	255
line_width	   equ	40
max_direntry_lines equ	23

; master boot record
mbr_pi	equ	$1be

; partition info record
pi_active	 equ $00
pi_start_head	 equ $01
pi_start_cyl_sec equ $02
pi_fs_type	 equ $04
pi_end_head	 equ $05
pi_end_cyl_sec	 equ $06
pi_first_sector	 equ $08
pi_size		 equ $0c

; BPB record
bpb_bytes_per_sector equ $0b
bpb_secs_per_clus    equ $0d
bpb_reserved_secs    equ $0e
bpb_fat_copies	     equ $10
bpb_root_dir_entries equ $11
bpb_num_secs	     equ $13
bpb_media_type	     equ $15
bpb_fat16_size       equ $16
bpb_secs_per_track   equ $18
bpb_num_heads	     equ $1a
bpb_hidden_secs	     equ $1c
bpb_total_secs32     equ $20
bpb_fat32_size	     equ $24
bpb_root_cluster     equ $2c

; FAT directory entry
direntry_name	     equ $00
direntry_attrs	     equ $0b
direntry_fst_clus_hi equ $14
direntry_fst_clus_lo equ $1a
direntry_size	     equ 32

	opt	h-f+
	org	$8000
:10	nop
	jmp	start
; ------
dlist_0	dta	$70,$70,$70
    :23	dta	$42,a(screen)
	dta	$42,a(legend)
	dta	$41,a(dlist_0)

dlist_1	dta	$70,$70,$70
    :23	dta	$42,a(screen)
	dta	$42,a(legend)
	dta	$41,a(dlist_1)

dlist_select	dta	0
count		dta	0
tmp		dta	0
offset		dta	0
prev_de_attrs	dta	0

mul0		dta	0,0,0,0
mul_res		dta	0,0,0,0

fs_type		dta	0
part0_1st_sec	dta	0,0,0,0
fat_size	dta	0,0,0,0
secs_per_clus	dta	0
fat_start	dta	0,0,0,0
fst_data_sec	dta	0,0,0,0

root_dir_cluster	dta	0,0,0,0
direntry_counter	dta	0
direntry_sector_counter	dta	0
total_files		dta	0
file_select		dta	0
new_file_select		dta	0
file_select_line	dta	0
file_select_top		dta	0
fname_indexes 	   :256	dta	0
first_sectors	   :256	dta	0,0,0,0
line_addresses_l   :256	dta	0
line_addresses_h   :256	dta	0

bubble_top	dta	0
bubble		dta	0

msg1	dta	d'Init',$9b
msg2	dta	d'Read',$9b
msg3	dta	d'MBR',$9b
msg4	dta	d'BPB',$9b
msg5	dta	d'Unknown filesystem type',$9b
msg6	dta	d'Hit Start',$9b
legend	dta	$dc,$dd,d':select file,',d'Return'*,d':load & run        '
digits	dta	d'0123456789ABCDEF'
; ------
start
	; wait for loading $a000-$bfff to complete
	jsr	w8_cart_read

	; read sector MBR
	lda	#$00
	sta	sec_num
	sta	sec_num+1
	sta	sec_num+2
	sta	sec_num+3
	mva	#[[sec_buf1-$8000]/512]	sec_offs
	mva	#1	sec_cnt
	sta	command
	jsr	w8_cart_read

	; save filesystem type
	lda	sec_buf1+mbr_pi+pi_fs_type
	sta	fs_type

	; save partition 0 first sector number
	mva	sec_buf1+mbr_pi+pi_first_sector   part0_1st_sec
	mva	sec_buf1+mbr_pi+pi_first_sector+1 part0_1st_sec+1
	mva	sec_buf1+mbr_pi+pi_first_sector+2 part0_1st_sec+2
	mva	sec_buf1+mbr_pi+pi_first_sector+3 part0_1st_sec+3

	; read partition 0 first sector
	mva	part0_1st_sec	sec_num
	mva	part0_1st_sec+1	sec_num+1
	mva	part0_1st_sec+2	sec_num+2
	mva	part0_1st_sec+3	sec_num+3
	mva	#$01	command
	jsr	w8_cart_read

	; save FAT size
	lda	fs_type
	cmp	#$06
	beq	fat16_size
	cmp	#$0b
	beq	fat32_size
	mwa	#screen	cursor
	mwa	#msg5	ptr
	jsr	putstr
	jmp	*
fat16_size
	mwa	sec_buf1+bpb_fat16_size	fat_size
	jmp	fat_size_done
fat32_size
	mva	sec_buf1+bpb_fat32_size		fat_size
	mva	sec_buf1+bpb_fat32_size+1	fat_size+1
	mva	sec_buf1+bpb_fat32_size+2	fat_size+2
	mva	sec_buf1+bpb_fat32_size+3	fat_size+3
fat_size_done

	; save sectors per cluster number
	mva	sec_buf1+bpb_secs_per_clus	secs_per_clus

	; fat_start := part0_first_sector + reserved_sectors_number
	lda	part0_1st_sec
	add	sec_buf1+bpb_reserved_secs
	sta	fat_start
	lda	part0_1st_sec+1
	adc	sec_buf1+bpb_reserved_secs+1
	sta	fat_start+1
	lda	part0_1st_sec+2
	adc	#0
	sta	fat_start+2

	; first_data_sector := fat_copies*fat_size + fat_start 
	mva	fat_size	mul0
	mva	fat_size+1	mul0+1
	mva	fat_size+2	mul0+2
	mva	fat_size+3	mul0+3
	lda	sec_buf1+bpb_fat_copies
	jsr	mul_8_32
	lda	mul_res
	add	fat_start
	sta	fst_data_sec
	lda	mul_res+1
	adc	fat_start+1
	sta	fst_data_sec+1
	lda	mul_res+2
	adc	fat_start+2
	sta	fst_data_sec+2
	lda	mul_res+3
	adc	fat_start+3
	sta	fst_data_sec+3

	; copy root dir 1st cluster
	mva	sec_buf1+bpb_root_cluster+0	root_dir_cluster+0
	mva	sec_buf1+bpb_root_cluster+1	root_dir_cluster+1
	mva	sec_buf1+bpb_root_cluster+2	root_dir_cluster+2
	mva	sec_buf1+bpb_root_cluster+3	root_dir_cluster+3

	; setup filename lookup tables
	ldx	#0
	mwa	#screen	ptr
setup_fname_address_loop
	txa
	sta	fname_indexes,x
	lda	ptr+0
	sta	line_addresses_l,x
	lda	ptr+1
	sta	line_addresses_h,x
	lda	#line_width
	add:sta	ptr+0
	lda	#0
	adc:sta	ptr+1
	cpx	#102-1			; 102 filenames in $5000..$5fff
	beq	setup_fname_gap
	cpx	#204-1			; 102 filenames in $6000..$6fff
	bne	setup_fname_next
setup_fname_gap
	lda	#16
	add:sta	ptr+0
	lda	#0
	adc:sta	ptr+1
setup_fname_next
	inx
	bne	setup_fname_address_loop

	; scan & display directory entries
	jsr	load_root_dir_sector
	mwa	#[sec_buf1+512]	dentry
	mwa	#[screen+1]	ptr
de_loop	lda	total_files
	cmp	#max_files
	jeq	de_done
	tax
	lda	line_addresses_l,x
	add	#1
	sta	ptr+0
	lda	line_addresses_h,x
	adc	#0
	sta	ptr+1			; ptr := current_line_address + 1
	ldy	#0
	lda	(dentry),y
	jeq	de_done			; last entry
	cmp	#$e5
	jeq	de_next			; entry deleted and/or available?
	cmp	#$2e
	jeq	de_next			; '.' or '..'?
	ldy	#direntry_attrs
	lda	(dentry),y
	and	#$de			; hidden|system|vol_label|subdir|device
	jne	de_next			; not a regular file?
	lda	#$0f
	cmp	prev_de_attrs
	beq	de_long_filename
de_short_filename
	ldx	#9
	ldy	#8
de_scan_short_name_loop
	dex
	dey
	lda	(dentry),y
	cmp	#' '
	beq	de_scan_short_name_loop
	ldy	#0
de_print_name_loop
	lda	(dentry),y
	jsr	atascii2internal
	sta	(ptr),y+
	dex
	bne	de_print_name_loop
	lda	#'.'
	jsr	atascii2internal
	sta	(ptr),y+
de_print_ext
	sty	offset
	ldy	#8
	lda	(dentry),y
	jsr	atascii2internal
	ldy	offset
	sta	(ptr),y+
	sty	offset
	ldy	#9
	lda	(dentry),y
	jsr	atascii2internal
	ldy	offset
	sta	(ptr),y+
	sty	offset
	ldy	#10
	lda	(dentry),y
	jsr	atascii2internal
	ldy	offset
	sta	(ptr),y+
	jmp	de_count_entry
de_long_filename
	mwa	dentry	dentry2
	lda	#0
	sta	offset
de_long_filename_loop
	lda	dentry2+0
	sub	#direntry_size
	sta	dentry2+0
	lda	dentry2+1
	sbc	#0
	sta	dentry2+1
	ldy	#$01
	jsr	put_lfn_char
	jeq	de_count_entry
	ldy	#$03
	jsr	put_lfn_char
	beq	de_count_entry
	ldy	#$05
	jsr	put_lfn_char
	beq	de_count_entry
	ldy	#$07
	jsr	put_lfn_char
	beq	de_count_entry
	ldy	#$09
	jsr	put_lfn_char
	beq	de_count_entry
	ldy	#$0e
	jsr	put_lfn_char
	beq	de_count_entry
	ldy	#$10
	jsr	put_lfn_char
	beq	de_count_entry
	ldy	#$12
	jsr	put_lfn_char
	beq	de_count_entry
	ldy	#$14
	jsr	put_lfn_char
	beq	de_count_entry
	ldy	#$16
	jsr	put_lfn_char
	beq	de_count_entry
	ldy	#$18
	jsr	put_lfn_char
	beq	de_count_entry
	ldy	#$1c
	jsr	put_lfn_char
	beq	de_count_entry
	ldy	#$1e
	jsr	put_lfn_char
	beq	de_count_entry
	ldy	#0
	lda	(dentry2),y
	and	#$40
	beq	de_long_filename_loop
	jmp	de_count_entry
put_lfn_char
	lda	(dentry2),y+
	sta	tmp
	lda	(dentry2),y
	ora	tmp
	beq	put_lfn_char_done
	lda	tmp
	jsr	atascii2internal
	ldy	offset
	cpy	#39
	beq	put_lfn_char_done
	sta	(ptr),y+
	sty	offset
put_lfn_char_done
	rts
de_count_entry
	; ptr := first_sectors + 4*total_files
	lda	#0
	sta	ptr+1
	lda	total_files
	asl	@
	rol	ptr+1
	asl	@
	rol	ptr+1
	add	#<first_sectors
	sta	ptr+0
	lda	#>first_sectors
	adc:sta	ptr+1
	; mul_res := (first_cluster - 2) * sectors_per_cluster
	ldy	#direntry_fst_clus_lo
	lda	(dentry),y+
	sub	#2
	sta	mul0
	lda	(dentry),y
	sbc	#0
	sta	mul0+1
	ldy	#direntry_fst_clus_hi
	lda	(dentry),y+
	sbc	#0
	sta	mul0+2
	lda	(dentry),y
	sbc	#0
	sta	mul0+3
	lda	secs_per_clus
	jsr	mul_8_32
	; first_sectors[total_files] := file's first sector number
	ldy	#0
	lda	mul_res
	add	fst_data_sec
	sta	(ptr),y+
	lda	mul_res+1
	adc	fst_data_sec+1
	sta	(ptr),y+
	lda	mul_res+2
	adc	fst_data_sec+2
	sta	(ptr),y+
	lda	mul_res+3
	adc	fst_data_sec+3
	sta	(ptr),y
	; update file counter
	ldx	total_files
	inx
	stx	total_files
de_next	ldy	#direntry_attrs
	lda	(dentry),y
	sta	prev_de_attrs
	lda	#direntry_size
	add:sta	dentry
	lda	#0
	adc:sta	dentry+1
	ldx	direntry_counter
	inx
	stx	direntry_counter
	cpx	#[512/direntry_size]
	jne	de_shift_done			; shift one sector
	ldx	#0
	stx	direntry_counter
	mwa	#[sec_buf1+sec_buf1_size/2] dentry
	ldx	direntry_sector_counter
	inx
	stx	direntry_sector_counter
	cpx	secs_per_clus
	jne	shift_root_dir_sectors
	; load next root dir cluster
	; sector number = fat_start + root_dir_cluster/128
	lda	root_dir_cluster+0
	asl	@
	lda	root_dir_cluster+1
	rol	@
	sta	sec_num+0
	lda	root_dir_cluster+2
	rol	@
	sta	sec_num+1
	lda	root_dir_cluster+3
	rol	@
	sta	sec_num+2
	lda	#0
	rol	@
	sta	sec_num+3
	lda	fat_start+0
	add:sta	sec_num+0
	lda	fat_start+1
	adc:sta	sec_num+1
	lda	fat_start+2
	adc:sta	sec_num+2
	lda	fat_start+3
	adc:sta	sec_num+3
	mva	#[[fat_buf-$8000]/512]	sec_offs
	mva	#1	sec_cnt
	mva	#$01	command
	jsr	w8_cart_read
	; next_cluster_addr = fat_buf + (root_dir_cluster & 127) * 4
	lda	#0
	sta	ptr+1
	lda	root_dir_cluster
	and	#$7f
	asl	@
	rol	ptr+1
	asl	@
	rol	ptr+1
	sta	ptr+0
	lda	#<fat_buf
	add:sta	ptr+0
	lda	#>fat_buf
	adc:sta	ptr+1
	; get next root dir cluster
	; stop scanning when root_dir_cluster == 0x0fffffff
	ldy	#0
	lda	(ptr),y+
	cmp	#$ff
	bne	*+5
	jmp	de_done
	sta	root_dir_cluster+0
	lda	(ptr),y+
	cmp	#$ff
	bne	*+5
	jmp	de_done
	sta	root_dir_cluster+1
	lda	(ptr),y+
	cmp	#$ff
	bne	*+5
	jmp	de_done
	sta	root_dir_cluster+2
	lda	(ptr),y+
	cmp	#$0f
	beq	de_done
	sta	root_dir_cluster+3
	; reset sector counter
	ldx	#0
	stx	direntry_sector_counter
shift_root_dir_sectors
	ldx	#0
shift_root_loop
	lda	sec_buf1+512,x
	sta	sec_buf1,x
	lda	sec_buf1+512+256,x
	sta	sec_buf1+256,x
	inx
	bne	shift_root_loop
	jsr	load_root_dir_sector
de_shift_done
	jmp	de_loop
de_done

	; sort file indexes:
	; for top = total_files-2 .. 0
	;   for bubble = 0 .. top
	;      if filenames[bubble] > filenames[bubble+1] then swap file indexes
	lda	total_files
	sub	#2
	sta	bubble_top
bubble_outer_loop
	lda	#0
	sta	bubble
bubble_inner_loop
	jsr	bubble_cmp
	bcs	bubble_next
	jsr	bubble_swap
bubble_next
	ldx	bubble
	cpx	bubble_top
	beq	bubble_inner_done
	inx
	stx	bubble
	jmp	bubble_inner_loop
bubble_inner_done
	ldx	bubble_top
	beq	bubble_outer_done
	dex
	stx	bubble_top
	jmp	bubble_outer_loop
bubble_outer_done

	jsr	update_dlist

	lda	#$7f
	jsr	draw_selector
select_loop
	jsr	getchar
	cmp	#$1c			; [Control] + [Up]
	beq	select_previous
	cmp	#$2d			; [-]
	beq	select_previous
	cmp	#$1d			; [Control] + [Down]
	beq	select_next
	cmp	#$3d			; [=]
	beq	select_next
	cmp	#$9b			; [Return]
	beq	selected
	jmp	select_loop
select_previous
	ldx	file_select
	beq	select_loop
	dex
	stx	new_file_select
	ldx	file_select_line
	beq	scroll_up
	dex
	stx	file_select_line
	jmp	select_update
select_next
	ldx	file_select
	inx
	cpx	total_files
	beq	select_loop
	stx	new_file_select
	ldx	file_select_line
	cpx	#[max_direntry_lines-1]
	beq	scroll_down
	inx
	stx	file_select_line
	jmp	select_update
scroll_up
	ldx	file_select_top
	dex
	stx	file_select_top
	jsr	update_dlist
	jmp	select_update
scroll_down
	ldx	file_select_top
	inx
	stx	file_select_top
	jsr	update_dlist
	;jmp	select_update
select_update
	lda	#0
	jsr	draw_selector
	lda	new_file_select
	sta	file_select
	lda	#$7f
	jsr	draw_selector
	jmp	select_loop
selected
	lda	#$ff
	jsr	draw_selector

	; ptr := first_sectors + 4*file_select
	lda	#0
	sta	ptr+1
	ldx	file_select
	lda	fname_indexes,x
	asl	@
	rol	ptr+1
	asl	@
	rol	ptr+1
	add	#<first_sectors
	sta	ptr+0
	lda	#>first_sectors
	adc:sta	ptr+1
	; setup D5 registers using selected file's first sector
	ldy	#0
	lda	(ptr),y+
	sub	#$10
	sta	sec_num
	lda	(ptr),y+
	sbc	#0
	sta	sec_num+1
	lda	(ptr),y+
	sbc	#0
	sta	sec_num+2
	lda	(ptr),y
	sbc	#0
	sta	sec_num+3

	mva	#8	$d01f

	rts
; ------
bubble_cmp
	ldx	bubble
	ldy	fname_indexes,x
	lda	line_addresses_l,y
	sta	ptr+0
	lda	line_addresses_h,y
	sta	ptr+1

	inx
	ldy	fname_indexes,x
	lda	line_addresses_l,y
	sta	ptr2+0
	lda	line_addresses_h,y
	sta	ptr2+1

	ldy	#1
bubble_cmp_loop
	lda	(ptr),y
	jsr	internal2lowercase
	sta	tmp
	lda	(ptr2),y
	jsr	internal2lowercase
	cmp	tmp
	bne	bubble_cmp_done
	iny
	cpy	#line_width
	bne	bubble_cmp_loop
bubble_cmp_done

	rts
; ------
bubble_swap
	ldx	bubble
	lda	fname_indexes,x
	pha
	lda	fname_indexes+1,x
	sta	fname_indexes,x
	pla
	sta	fname_indexes+1,x
	rts
; ------
draw_selector
	ldx	file_select
	ldy	fname_indexes,x
	ldx	line_addresses_l,y
	stx	ptr+0
	ldx	line_addresses_h,y
	stx	ptr+1
	ldy	#0
	sta	(ptr),y
	rts
; ------
atascii2internal
	cmp	#$20
	bcs	range_1
range_0	add	#$40
	rts
range_1	cmp	#$60
	bcs	range_2
	sub	#$20
	rts
range_2	cmp	#$80
	bcs	range_3
	rts
range_3	cmp	#$a0
	bcs	range_4
	add	#$30
	rts
range_4	cmp	#$e0
	bcs	range_5
	rts
range_5	sub	#$10
	rts
; ------
getchar
	lda	$e425
	pha
	lda	$e424
	pha
	rts
; ------
internal2lowercase
	cmp	#$21		; 'A'
	bcc	internal2lowercase_done
	cmp	#$3B		; 'Z'+1
	bcs	internal2lowercase_done
	ora	#$40
internal2lowercase_done
	rts
; ------
w8_cart_read
	lda	#$c0
w8_cart_read_loop
	bit	command
	beq	w8_cart_read_loop
	bmi	error
	rts
; ------
error
	mva	^4b	^1a
	jmp	error
; ------
; mul_res := a * mul0
mul_8_32
	ldx	#0
	stx	mul_res
	stx	mul_res+1
	stx	mul_res+2
	stx	mul_res+3
mul_8_32_loop	
	clc
	ror	@
	tax
	bcc	mul_8_32_next
	clc
	lda	mul_res
	adc	mul0
	sta	mul_res
	lda	mul_res+1
	adc	mul0+1
	sta	mul_res+1
	lda	mul_res+2
	adc	mul0+2
	sta	mul_res+2
	lda	mul_res+3
	adc	mul0+3
	sta	mul_res+3
mul_8_32_next
	asl	mul0
	rol	mul0+1
	rol	mul0+2
	rol	mul0+3
	txa
	bne	mul_8_32_loop
mul_8_32_done	
	rts
; ------
putstr
	ldy	#0
putstrloop
	lda	(ptr),y
	cmp	#$9b
	beq	putstrdone
	sta	(cursor),y+
	jmp	putstrloop
putstrdone

	tya
	add:sta	cursor
	scc:inc	cursor+1

	rts
; ------
putchar
	ldy	#0
	sta	(cursor),y
	inw	cursor
	rts
; ------
puthex
	pha
:4	ror	@
	jsr	putdigit
	pla
	jsr	putdigit
	rts

putdigit
	and	#$0f
	tay
	lda	digits,y
	jsr	putchar
	rts
; ------
; sector number = first_data_sector +
;		  sectors_per_cluster * (root_dir_cluster - 2) +
;		  direntry_sector_counter
load_root_dir_sector
	lda	root_dir_cluster+0
	sub	#2
	sta	mul0+0
	lda	root_dir_cluster+1
	sbc	#0
	sta	mul0+1
	lda	root_dir_cluster+2
	sbc	#0
	sta	mul0+2
	lda	root_dir_cluster+3
	sbc	#0
	sta	mul0+3
	lda	secs_per_clus
	jsr	mul_8_32

	lda	mul_res+0
	add	fst_data_sec+0
	sta	sec_num+0
	lda	mul_res+1
	adc	fst_data_sec+1
	sta	sec_num+1
	lda	mul_res+2
	adc	fst_data_sec+2
	sta	sec_num+2
	lda	mul_res+3
	adc	fst_data_sec+3
	sta	sec_num+3

	lda	direntry_sector_counter
	add:sta	sec_num+0
	lda	#0
	adc:sta	sec_num+1
	lda	#0
	adc:sta	sec_num+2
	lda	#0
	adc:sta	sec_num+3

	mva	#[[sec_buf1+sec_buf1_size/2-$8000]/512]	sec_offs
	mva	#1	sec_cnt
	mva	#$01	command
	jsr	w8_cart_read

	mva	#0	 sdmctl
	mwa	#dlist_2 dladr
	mva	#$22	 sdmctl
	mva	#8	 $d01f

	rts
; ------
update_dlist
	lda	dlist_select
	bne	init_dlist_1
init_dlist_0
	mwa	#dlist_0+4 ptr
	jmp	done_init_dlist
init_dlist_1
	mwa	#dlist_1+4 ptr
done_init_dlist

	ldx	file_select_top
	mva	#23	count
update_dlist_loop
	ldy	fname_indexes,x
	lda	line_addresses_l,y
	ldy	#0
	sta	(ptr),y
	ldy	fname_indexes,x
	lda	line_addresses_h,y
	ldy	#1
	sta	(ptr),y
	lda	#3
	add:sta	ptr
	lda	#0
	adc:sta	ptr+1
	inx
	ldy	count
	dey
	sty	count
	bne	update_dlist_loop

	mva	#0	sdmctl
	lda	dlist_select
	bne	set_dlist_1
set_dlist_0
	mwa	#dlist_0	dladr
	jmp	done_set_dlist
set_dlist_1
	mwa	#dlist_1	dladr
done_set_dlist
	mva	#$22	sdmctl

	lda	#1
	eor:sta	dlist_select

	rts
; ------
	org	$a006+4
	sei
	sta	^4e
	lda	#124
	cmp:rne	^4b
	lda	#123
	cmp:rne	^4b
	rts

dlist_2	dta	$70,$70,$70
    :24	dta	$42,a(empty)
	dta	$41,a(dlist_2)
empty
    :40	dta	0

	end
